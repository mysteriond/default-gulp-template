/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$s-calendar-name: 's-Calendar';
$s-calendar-x: 108px;
$s-calendar-y: 0px;
$s-calendar-offset-x: -108px;
$s-calendar-offset-y: 0px;
$s-calendar-width: 48px;
$s-calendar-height: 48px;
$s-calendar-total-width: 156px;
$s-calendar-total-height: 105px;
$s-calendar-image: '../img/sprite.png';
$s-calendar: (108px, 0px, -108px, 0px, 48px, 48px, 156px, 105px, '../img/sprite.png', 's-Calendar', );
$s-idea-name: 's-Idea';
$s-idea-x: 108px;
$s-idea-y: 51px;
$s-idea-offset-x: -108px;
$s-idea-offset-y: -51px;
$s-idea-width: 48px;
$s-idea-height: 48px;
$s-idea-total-width: 156px;
$s-idea-total-height: 105px;
$s-idea-image: '../img/sprite.png';
$s-idea: (108px, 51px, -108px, -51px, 48px, 48px, 156px, 105px, '../img/sprite.png', 's-Idea', );
$s-key-filled-name: 's-KeyFilled';
$s-key-filled-x: 55px;
$s-key-filled-y: 0px;
$s-key-filled-offset-x: -55px;
$s-key-filled-offset-y: 0px;
$s-key-filled-width: 50px;
$s-key-filled-height: 50px;
$s-key-filled-total-width: 156px;
$s-key-filled-total-height: 105px;
$s-key-filled-image: '../img/sprite.png';
$s-key-filled: (55px, 0px, -55px, 0px, 50px, 50px, 156px, 105px, '../img/sprite.png', 's-KeyFilled', );
$s-news-filled-name: 's-NewsFilled';
$s-news-filled-x: 0px;
$s-news-filled-y: 55px;
$s-news-filled-offset-x: 0px;
$s-news-filled-offset-y: -55px;
$s-news-filled-width: 50px;
$s-news-filled-height: 50px;
$s-news-filled-total-width: 156px;
$s-news-filled-total-height: 105px;
$s-news-filled-image: '../img/sprite.png';
$s-news-filled: (0px, 55px, 0px, -55px, 50px, 50px, 156px, 105px, '../img/sprite.png', 's-NewsFilled', );
$s-toolbox-filled-name: 's-ToolboxFilled';
$s-toolbox-filled-x: 53px;
$s-toolbox-filled-y: 55px;
$s-toolbox-filled-offset-x: -53px;
$s-toolbox-filled-offset-y: -55px;
$s-toolbox-filled-width: 50px;
$s-toolbox-filled-height: 50px;
$s-toolbox-filled-total-width: 156px;
$s-toolbox-filled-total-height: 105px;
$s-toolbox-filled-image: '../img/sprite.png';
$s-toolbox-filled: (53px, 55px, -53px, -55px, 50px, 50px, 156px, 105px, '../img/sprite.png', 's-ToolboxFilled', );
$s-user-male-name: 's-UserMale';
$s-user-male-x: 0px;
$s-user-male-y: 0px;
$s-user-male-offset-x: 0px;
$s-user-male-offset-y: 0px;
$s-user-male-width: 52px;
$s-user-male-height: 52px;
$s-user-male-total-width: 156px;
$s-user-male-total-height: 105px;
$s-user-male-image: '../img/sprite.png';
$s-user-male: (0px, 0px, 0px, 0px, 52px, 52px, 156px, 105px, '../img/sprite.png', 's-UserMale', );
$spritesheet-width: 156px;
$spritesheet-height: 105px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($s-calendar, $s-idea, $s-key-filled, $s-news-filled, $s-toolbox-filled, $s-user-male, );
$spritesheet: (156px, 105px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
